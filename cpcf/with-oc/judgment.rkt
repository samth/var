#lang racket
(require redex)
(require "lang.rkt")

(provide ⇓)

(define-judgment-form scpcf
  #:mode     (⇓ I I  O O O)
  #:contract (⇓ Γ C  V Γ o)
  
  [
   --------------------------------------------------- "val"
   (⇓ Γ V (flush Γ V) Γ ∅)]
  
  [(where V (! ρ x))
   --------------------------------------------------- "var"
   (⇓ Γ (x ρ O) (refine-with-Γ V Γ x) Γ (! O x))]
  
  [(where ((μ (z) e) ρ_μ O_μ) (! ρ x))
   (⇓ (mk-Γ (dom ρ_μ) Γ) ((μ (z) e) ρ_μ O_μ) V Γ_1 o)
   --------------------------------------------------- "var-μ"
   (⇓ Γ (x ρ O) V (upd-Γ Γ Γ_1) (! O x))]
  
  [(⇓ Γ (f ρ O) V_f Γ_1 o_f)
   (⇓ Γ_1 (e ρ O) V_x Γ_2 o_x)
   (where ((λ (x) e_1) ρ_λ O_λ) V_f)
   (⇓ (mk-Γ (dom ρ_λ) Γ_2) (@ V_f (V_x o_x)) V_y Γ_3 o_y)
   --------------------------------------------------- "app-λ-raw"
   (⇓ Γ ((f e) ρ O) V_y (upd-Γ Γ_2 Γ_3) (mb o_y (dom Γ)))]
  
  [(⇓ Γ (f ρ O) V_f Γ_1 o_f)
   (⇓ Γ_1 (e ρ O) V_x Γ_2 o_x)
   (where (mon ((c_1 ↦ (λ (x) c_2)) ρ_c O_c) (V o)) V_f)
   (⇓ (mk-Γ (dom ρ_c) Γ_2) (@ V_f (V_x o_x)) V_y Γ_3 o_y)
   --------------------------------------------------- "app-mon-raw"
   (⇓ Γ ((f e) ρ O) V_y (upd-Γ Γ_2 Γ_3) (mb o_y (dom Γ)))]
  
  [(⇓ Γ (f ρ O) (o1 ρ_o O_o) Γ_1 o_f)
   (⇓ Γ_1 (e ρ O) V_x Γ_2 o_x)
   (⇓ Γ_2 (@ (o1 [] []) (V_x o_x)) V_y Γ_3 o_y)
   --------------------------------------------------- "app-o1-raw"
   (⇓ Γ ((f e) ρ O) V_y Γ_3 o_y)]
  
  [(⇓ Γ (f ρ O) (o2 ρ_o O_o) Γ_1 o_f)
   (⇓ Γ_1 (e_1 ρ O) V_1 Γ_2 o_1)
   (⇓ Γ_2 (e_2 ρ O) V_2 Γ_3 o_2)
   (⇓ Γ_3 (@ (o2 [] []) (V_1 o_1) (V_2 o_2)) V_y Γ_4 o_y)
   --------------------------------------------------- "app-o2-raw"
   (⇓ Γ ((f e_1 e_2) ρ O) V_y Γ_4 o_y)]
  
  [(⇓ (push Γ x) (e (:: ρ [x ↦ V_x]) (:: O [x ↦ (default-o o_x x)])) V_y Γ_1 o_y)
   --------------------------------------------------- "app-λ"
   (⇓ Γ (@ ((λ (x) e) ρ O) (V_x o_x)) V_y (pop Γ_1 x) (mb o_y (dom Γ)))]
  
  [(⇓ Γ (mon (c_1 ρ O) (V_x o_x)) V_x′ Γ_1 o_x′)
   (⇓ (mk-Γ (dom V_f) Γ_1) (@ V_f (V_x′ (mb o_x′ (dom V_f)))) V_y Γ_2 o_y)
   (⇓ (push (upd-Γ Γ_1 Γ_2) x)
      (mon (c_2 (:: ρ [x ↦ V_x′]) (:: O [x ↦ (default-o o_x′ x)]))
           (V_y (mb o_y (dom Γ_1))))
      V_y′ Γ_3 o_y′)
   --------------------------------------------------- "app-mon"
   (⇓ Γ (@ (mon ((c_1 ↦ (λ (x) c_2)) ρ O) (V_f o_f)) (V_x o_x))
      V_y′ (pop Γ_3 x) (mb o_y′ (dom Γ)))]
  
  [(where (any ... (V_y Γ_1 o_y) any_1 ...) (δ o1 (V_x o_x) Γ))
   --------------------------------------------------- "app-o1"
   (⇓ Γ (@ (o1 ρ O) (V_x o_x)) V_y Γ_1 o_y)]
  
  [(where (any ... (V_y Γ_1 o_y) any_1 ...) (δ o2 (V_1 o_1) (V_2 o_2) Γ))
   --------------------------------------------------- "app-o2"
   (⇓ Γ (@ (o2 ρ O) (V_1 o_1) (V_2 o_2)) V_y Γ_1 o_y)]
  
  [(⇓ Γ (e ρ O) V_0 Γ_0 o_0)
   (where (any ... ((#t ρ_t O_t) Γ_t o_t) any_1 ...) (δ true? (V_0 o_0) Γ_0))
   (⇓ Γ_0 (e_1 ρ O) V_1 Γ_1 o_1)
   --------------------------------------------------- "if-true"
   (⇓ Γ ((if e e_1 e_2) ρ O) V_1 Γ_1 o_1)]
  
  [(⇓ Γ (e ρ O) V_0 Γ_0 o_0)
   (where (any ... ((#f ρ_t O_t) Γ_t o_t) any_1 ...) (δ true? (V_0 o_0) Γ_0))
   (⇓ Γ_0 (e_2 ρ O) V_2 Γ_2 o_2)
   --------------------------------------------------- "if-false"
   (⇓ Γ ((if e e_1 e_2) ρ O) V_2 Γ_2 o_2)]
  
  [(⇓ (push Γ x) (e (:: ρ [x ↦ ((μ (x) e) ρ O)]) (:: O [x ↦ x]))
      V Γ_1 o)
   --------------------------------------------------- "μ"
   (⇓ Γ ((μ (x) e) ρ O) V (upd-Γ Γ (pop Γ_1 x)) (mb o (dom Γ)))]
  
  [(⇓ Γ (e ρ O) V Γ_1 o)
   (⇓ Γ_1 (mon (c ρ O) (V o)) V_1 Γ_2 o_1)
   --------------------------------------------------- "mon-raw"
   (⇓ Γ ((mon c e) ρ O) V_1 Γ_2 o_1)]
  
  [(where e_p (FC c))
   (⇓ Γ (e_p ρ O) V_p Γ_1 o_p)
   (⇓ (mk-Γ (dom V_p) Γ_1) (@ V_p (V (mb o (dom V_p)))) V_t Γ_2 o_t)
   (where (any ... ((#t ρ_t o_t) Γ_t o_t1) any_1 ...) (δ true? (V_t o_t) Γ_2))
   (where (any_2 ... V_1 any_3 ...) (refine-v V (c ρ O)))
   --------------------------------------------------- "mon-flat"
   (⇓ Γ (mon (c ρ O) (V o)) V_1 (upd-Γ Γ_1 Γ_2) (mb o (dom Γ)))]
  
  [(⇓ Γ (mon (c_1 ρ O) (V o)) V_1 Γ_1 o_1)
   (⇓ Γ (mon (c_2 ρ O) (V_1 o_1)) V_2 Γ_2 o_2)
   --------------------------------------------------- "mon-and/c"
   (⇓ Γ (mon ((and/c c_1 c_2) ρ O) (V o)) V_2 Γ_2 o_2)]
  
  [(where e_p (FC c_1))
   (⇓ Γ (e_p ρ O) V_p Γ_1 o_p)
   (⇓ (mk-Γ (dom V_p) Γ_1) (@ V_p (V (mb o (dom V_p)))) V_t Γ_2 o_t)
   (where (any ... ((#t ρ_t O_t) Γ_t o_tt) any_1 ...) (δ true? (V_t o_t) Γ_2))
   (where (any_2 ... V_1 any_3 ...) (refine-v V (c_1 ρ O)))
   --------------------------------------------------- "mon-or/c-1"
   (⇓ Γ (mon ((or/c c_1 c_2) ρ O) (V o)) V_1 (upd-Γ Γ_1 Γ_2) (mb o (dom Γ)))]
  
  [(where e_p (FC c_1))
   (⇓ Γ (e_p ρ O) V_p Γ_1 o_p)
   (⇓ (mk-Γ (dom V_p) Γ_1) (@ V_p (V (mb o (dom V_p)))) V_t Γ_2 o_t)
   (where (any ... ((#f ρ_t O_t) Γ_t o_tt) any_1 ...) (δ true? (V_t o_t) Γ_2))
   (⇓ (upd-Γ Γ_1 Γ_2) (mon (c_2 ρ O) (V o)) V_1 Γ_3 o_1)
   --------------------------------------------------- "mon-or/c-2"
   (⇓ Γ (mon ((or/c c_1 c_2) ρ O) (V o)) V_1 Γ_3 o_1)]
  
  [(where (any ... (V_1 V_2) any_1 ...) (split-cons (V o) Γ))
   (⇓ Γ (mon (c_1 ρ O) (V_1 (mb (acc-o car o) (dom ρ)))) V_1′ Γ_1 o_1)
   (⇓ Γ_1 (mon (c_2 ρ O) (V_2 (mb (acc-o cdr o) (dom ρ)))) V_2′ Γ_2 o_2)
   --------------------------------------------------- "mon-cons/c"
   (⇓ Γ (mon ((cons/c c_1 c_2) ρ O) (V o)) (V_1′ V_2′) Γ_2 (mb o (dom Γ)))])