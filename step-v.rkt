#lang racket
(require redex/reduction-semantics)
(require "lang.rkt" "meta.rkt" "op.rkt" "util.rkt")
(provide v)
(test-suite test step-v)

(define v
  (reduction-relation
   ŒªcœÅ #:domain (D œÉ)
   (--> ((clos ‚Ä¢ œÅ) œÉ) ((join-contracts) œÉ) bullet)
   (--> ((clos (OP ^ LAB) œÅ) œÉ)
        (((op-con OP) (env) <= Œõ LAB (-- (‚Üì OP (env))) OP (-- (‚Üì OP (env)))) œÉ))
   (--> (PREVAL œÉ) ((-- PREVAL) œÉ) wrap)
   ;; Environment propagation
   (--> ((clos (@ EXP ... LAB) œÅ) œÉ)
        ((@ (‚Üì EXP œÅ) ... LAB) œÉ)
        œÅ-@)
   (--> ((clos (if EXP ...) œÅ) œÉ)
        ((if (‚Üì EXP œÅ) ...) œÉ)
        œÅ-if)
   (--> ((clos (let ((X EXP_1) ...) EXP_2) œÅ) œÉ)
        ((let ((X (‚Üì EXP_1 œÅ)) ...) (‚Üì EXP_2 œÅ)) œÉ)
        œÅ-let)
   (--> ((clos (begin EXP ...) œÅ) œÉ)
        ((begin (‚Üì EXP œÅ) ...) œÉ)
        œÅ-begin)
   ;; Environment elimination
   (--> ((clos MODREF œÅ) œÉ) (MODREF œÉ) elim-œÅ)
   ;; Variable lookup
   (--> ((clos X œÅ) œÉ)
        (V œÉ)
        (where (any_0 ... V any_1 ...) (lookup-var œÉ œÅ X))
        var)
   ;; Application
   (--> ((@ (-- (clos (Œª (X ..._1) EXP) œÅ) C* ...) V ..._1 LAB) œÉ)
        ((‚Üì EXP œÅ_1) œÉ_1)
        (judgment-holds (chooses (V ...) (V_* ...)))
        (where (œÅ_1 œÉ_1) (bind-vars œÅ œÉ (X V_*) ...))        
        Œ≤)
   (--> ((@ (-- (clos (Œª* (X ..._1 X_r) EXP) œÅ) C* ...) V ..._1 V_r ... LAB) œÉ)
        ((‚Üì EXP œÅ_1) œÉ_1)
        (judgment-holds (chooses (V ...) (V_* ...)))
        (where (œÅ_1 œÉ_1) (bind-vars œÅ œÉ (X V_*) ... (X_r (list->list-value (V_r ...)))))        
        Œ≤*)
   (--> ((@ (-- (clos (Œª F (X ..._1) EXP) œÅ) C* ...) V ..._1 LAB) œÉ)        
        ((‚Üì EXP œÅ_1) œÉ_1)
        (judgment-holds (chooses (V ...) (V_* ...)))
        (where (œÅ_1 œÉ_1)
               (bind-vars œÅ œÉ 
                          (F (-- (‚Üì (Œª F (X ...) EXP) œÅ) C* ...)) 
                          (X V_*) ...))
        (side-condition 
         (not (and (redex-match ŒªcœÅ (AV* ...) (term (V ...)))
                   (redex-match ŒªcœÅ ((CON_a #hash()) ... ((CON_0 ... -> any_c3) #hash()) (CON_b #hash()) ...) (term (C* ...))))))
        Œ≤-rec)
   ;; this rule replaces the recursive call with its abstraction
   (--> ((@ (-- (clos (Œª F (X ..._1) EXP) œÅ) C* ...) AV* ..._1 LAB) œÉ)
        ((let ([F ((‚àß CON_a ... (CON_0 ... -> any_c3) CON_b ...) (env)
                                                                 <= ‚òÖ LAB 
                                                                 (-- (‚Üì (Œª F (X ...) EXP) œÅ) C* ...)
                                                                 qqqqqq
                                                                 (-- C* ...))])
           (‚Üì EXP œÅ_1))
         œÉ_1)
        ;((‚Üì EXP œÅ_1) œÉ_1)
        (judgment-holds (chooses (AV* ...) (AV*_* ...)))
        (where (œÅ_1 œÉ_1) (bind-vars œÅ œÉ (X AV*_*) ...))
        (where ((CON_a #hash()) ... ((CON_0 ... -> any_c3) #hash()) (CON_b #hash()) ...) (C* ...))
        #;(side-condition (printf "widening ~a\n" (term F)))
        special-Œ≤-rec)
   
   
   ;; Handle first class operations.     
   (--> ((@ V U ... LAB) œÉ)
        ((blame LAB Œõ V Œª V) œÉ)
        (side-condition (term (‚àà #t (Œ¥ procedure? V))))
        (where #f (arity-includes? V ,(length (term (U ...)))))
        wrong-arity)   
   (--> ((@ V U ... LAB) œÉ)
        ((blame LAB Œõ V Œª V) œÉ)
        (side-condition (term (‚àà #f (Œ¥ procedure? V))))
        wrong-not-proc)
   (--> ((if V D_1 D_2) œÉ) (D_1 œÉ)
        (side-condition (term (‚àà #f (Œ¥ false? V))))
        if-t)  
   (--> ((if V D_1 D_2) œÉ) (D_2 œÉ)
        (side-condition (term (‚àà #t (Œ¥ false? V))))
        if-f)
   (--> ((@ (-- (clos OP œÅ) C ...) V ... LAB) œÉ)
        (A œÉ)
        (where (A_1 ... A A_2 ...)
               (Œ¥ OP V ...))
        Œ¥)
   
   (--> ((begin V D) œÉ) (D œÉ) begin)
   (--> ((let ((X V) ...) (clos EXP œÅ)) œÉ)
        ((‚Üì EXP œÅ_1) œÉ_1)
        (where (œÅ_1 œÉ_1) (bind-vars œÅ œÉ (X V) ...))                
        let)))


(define-judgment-form ŒªcœÅ
  #:mode (chooses I O)
  #:contract (chooses (V ..._1) (V ..._1))
  [(chooses (V_1 ...) (V_2 ...))
   (choose V_1 V_2)
   ...])

(define-judgment-form ŒªcœÅ
  #:mode (choose I O)
  #:contract (choose V V)
  [(choose (-- C_1 ... ((or/c CON_1 CON_2) œÅ) C_2 ...) V)
   (choose (-- C_1 ... (CON_1 œÅ) C_2 ...) V)]
  [(choose (-- C_1 ... ((or/c CON_1 CON_2) œÅ) C_2 ...) V)
   (choose (-- C_1 ... (CON_2 œÅ) C_2 ...) V)]
  [(choose (-- C_1 ... ((rec/c X CON) œÅ) C_2 ...) V)
   (choose (-- C_1 ... ((unroll (rec/c X CON)) œÅ) C_2 ...) V)]
  [(choose (-- C# ...) (-- C# ...))]
  [(choose (-- PREVAL C ...) (-- PREVAL C ...))]
  [(choose BLESSED BLESSED)])

(test
 (test-equal (apply set (judgment-holds (choose (-- ((or/c (pred boolean? f) (pred string? f)) (env))) V) V))
             (apply set (term ((-- ((pred boolean? f) (env)))
                               (-- ((pred string? f) (env)))))))
 (test-equal (apply set (judgment-holds (choose (-- ((rec/c x (or/c (pred boolean? f) (pred string? f))) (env))) V) V))
             (apply set (term ((-- ((pred boolean? f) (env)))
                               (-- ((pred string? f) (env)))))))
 (test-equal (apply set (judgment-holds (choose (-- ((rec/c x (or/c (pred empty? f) (cons/c (‚àß) x))) (env))) V) V))
             (apply set (term ((-- ((cons/c (‚àß) (rec/c x (or/c (pred empty? f) (cons/c (pred (‚àß) Œõ) x)))) (env)))
                               (-- ((pred empty? f) (env))))))))
 
(test
 (define -->_v 
   (reduction-relation 
    ŒªcœÅ 
    (--> ((in-hole ùìî D_redex) œÉ)
         ((in-hole ùìî D_contractum) œÉ_1)
         (where (any_0 ... (D_contractum œÉ_1) any_1 ...)
                ,(apply-reduction-relation v (term (D_redex œÉ)))))))
 
 (test/œÉ--> v
            (term (‚Üì ‚Ä¢ (env)))
            (term (join-contracts)))
 (test/œÉ--> v
            (term (clos (+ ^ f) (env)))
            (term ((op-con +) (env) <= Œõ f (-- (‚Üì + (env))) + (-- (‚Üì + (env))))))
 (test/œÉ--> v 
            (term (‚Üì (@ (Œª (x) 0) 1 ‚Ä†) (env)))
            (term (@ (‚Üì (Œª (x) 0) (env)) (‚Üì 1 (env)) ‚Ä†))) 
 (test/œÉ--> v 
            (term (‚Üì (Œª (x) 0) (env)))
            (term (-- (‚Üì (Œª (x) 0) (env)))))
 (test/œÉ--> v
            (term (‚Üì 1 (env)))
            (term (-- (‚Üì 1 (env)))))
 (test/œÉ--> v
            (term (‚Üì (let ((x 1) (y 2)) (@ + x y ‚Ä†)) (env)))
            (term (let ((x (‚Üì 1 (env)))
                        (y (‚Üì 2 (env))))
                    (‚Üì (@ + x y ‚Ä†) (env)))))
 (test/œÉ--> v
            (term (‚Üì (p? ^ f g) (env)))
            (term (p? ^ f g)))
 (test--> v
          (term ((@ (-- (‚Üì (Œª (x) 0) (env))) (-- (‚Üì 1 (env))) ‚Ä†) (sto)))
          (redex-let ŒªcœÅ
                     ([(œÅ œÉ) (term (bind-vars (env) (sto) (x (-- (‚Üì 1 (env))))))])
                     (term ((‚Üì 0 œÅ) œÉ))))
 (test/œÉ--> v
            (term (‚Üì 0 (env)))
            (term (-- (‚Üì 0 (env))))) 
 (test-->> -->_v
           (term ((‚Üì (@ (Œª (x) 0) 1 ‚Ä†) (env)) (sto)))
           (redex-let ŒªcœÅ
                      ([(œÅ œÉ) (term (bind-vars (env) (sto) (x (-- (‚Üì 1 (env))))))])
                      (term ((-- (‚Üì 0 œÅ)) œÉ))))
 (test--> v
          (term ((@ (-- (‚Üì (Œª f (x) (@ f x f)) (env)))
                    (-- (‚Üì 0 (env)))
                    f)
                 (sto)))
          (redex-let ŒªcœÅ
                     ([(œÅ œÉ) (term (bind-vars (env) (sto) 
                                              (f (-- (‚Üì (Œª f (x) (@ f x f)) (env))))
                                              (x (-- (‚Üì 0 (env))))))])
                     (term ((‚Üì (@ f x f) œÅ) œÉ))))
 
 (test--> v
          (term ((@ (-- (‚Üì (Œª* (x r) 0) (env))) 
                    (-- (‚Üì 1 (env)))
                    (-- (‚Üì 2 (env)))
                    (-- (‚Üì 3 (env)))
                    f)
                 (sto)))
          (redex-let ŒªcœÅ
                     ([(œÅ œÉ) (term (bind-vars (env) (sto)
                                              (x (-- (‚Üì 1 (env))))
                                              (r (list->list-value ((-- (‚Üì 2 (env))) (-- (‚Üì 3 (env))))))))])
                     (term ((‚Üì 0 œÅ) œÉ))))
 
 (test/v-->> -->_v
             (term (‚Üì (@ (Œª fact (n)
                           (if (@ zero? n ‚Ä†)
                               1
                               (@ * n (@ fact (@ sub1 n ‚Ä†) ‚Ä†) ‚Ä†)))
                         5 ‚Ä†)
                      (env)))
             (term (-- (‚Üì 120 (env)))))
 
 (redex-let ŒªcœÅ
            ([(œÅ œÉ) (term (bind-vars (env) (sto) (x (-- (‚Üì 2 (env))))))])
            (test--> v
                     (term ((‚Üì x œÅ) œÉ))
                     (term ((-- (‚Üì 2 (env))) œÉ))))
 (test/œÉ--> v
            (term (‚Üì (if #f 7 8) (env)))
            (term (if (‚Üì #f (env)) (‚Üì 7 (env)) (‚Üì 8 (env))))) 
 (test/œÉ--> v
            (term (‚Üì #f (env)))
            (term (-- (‚Üì #f (env))))) 
 (test/œÉ--> v
            (term (if (-- (‚Üì #f (env)))
                      (‚Üì 7 (env))
                      (‚Üì 8 (env))))
            (term (‚Üì 8 (env))))
 (test/œÉ--> v
            (term (if (-- (‚Üì #t (env)))
                      (‚Üì 7 (env))
                      (‚Üì 8 (env))))
            (term (‚Üì 7 (env))))
 (test/œÉ--> v
            (term (@ (-- (‚Üì string=? (env))) 
                     (-- (‚Üì "foo" (env)))
                     (-- (‚Üì "foo" (env))) 
                     ‚Ä†))
            (term (-- (‚Üì #t (env)))))
 (test/œÉ--> v
            (term (@ (-- (‚Üì expt (env)))
                     (-- (‚Üì 2 (env)))
                     (-- (‚Üì 32 (env)))
                     ‚Ä†))
            (term (-- (‚Üì 4294967296 (env)))))
 (test/œÉ--> v 
            (term (begin (-- (‚Üì 3 (env))) (‚Üì 5 (env))))
            (term (‚Üì 5 (env))))  
 (test-->> -->_v
           (term ((‚Üì (begin 3 5) (env)) (sto)))
           (term ((-- (‚Üì 5 (env))) (sto))))
 (test--> v
          (term ((let ((x (-- (‚Üì 1 (env))))
                       (y (-- (‚Üì 2 (env)))))
                   (‚Üì (@ + x y ‚Ä†) (env)))
                 (sto)))
          (redex-let ŒªcœÅ
                     ([(œÅ œÉ) (term (bind-vars (env) (sto) 
                                              (x (-- (‚Üì 1 (env))))
                                              (y (-- (‚Üì 2 (env))))))])
                     (term ((‚Üì (@ + x y ‚Ä†) œÅ) œÉ))))
 (test-->> -->_v
           (term ((let ((x (-- (‚Üì 1 (env))))
                        (y (-- (‚Üì 2 (env)))))
                    (‚Üì (@ + x y ‚Ä†) (env)))
                  (sto)))
           (redex-let ŒªcœÅ
                      ([(œÅ œÉ) (term (bind-vars (env) (sto) 
                                               (x (-- (‚Üì 1 (env))))
                                               (y (-- (‚Üì 2 (env))))))])
                      (term ((-- (‚Üì 3 (env))) œÉ))))      
 (test-->> -->_v
           (term ((‚Üì (@ procedure-arity-includes? (Œª (x) x) 1 ‚Ä†) (env)) (sto)))
           (term ((-- (‚Üì #t (env))) (sto))))
 (test-->> -->_v
           (term ((‚Üì (@ procedure-arity-includes? (Œª (x) x) 2 ‚Ä†) (env)) (sto)))
           (term ((-- (‚Üì #f (env))) (sto))))
 (test-->> -->_v
           (term ((‚Üì (@ (Œª () 1) 2 ‚Ä†) (env)) (sto)))
           (term ((blame ‚Ä† Œõ (-- (‚Üì (Œª () 1) (env))) Œª (-- (‚Üì (Œª () 1) (env)))) (sto))))
 (test-->> -->_v
           (term ((‚Üì (@ 3 1 ‚Ä†) (env)) (sto)))
           (term ((blame ‚Ä† Œõ (-- (‚Üì 3 (env))) Œª (-- (‚Üì 3 (env)))) (sto)))))

